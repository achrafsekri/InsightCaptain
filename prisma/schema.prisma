// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String             @id @default(cuid())
    name          String?
    email         String?            @unique
    emailVerified DateTime?
    image         String?
    organizations userOrganization[]
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Organization model
model Organization {
    id        String             @id @default(cuid())
    name      String
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt
    users     userOrganization[]
    invite    invite[]
    Survey    Survey[]
    Poll      Poll[]
    CaseStudy CaseStudy[]
}

model userOrganization {
    id             String       @id @default(cuid())
    role           Role         @default(MEMBER)
    userId         String
    organizationId String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    joinedAt       DateTime     @default(now())
}

model invite {
    id             String       @id @default(cuid())
    invitationCode String       @unique @default(cuid())
    email          String
    organizationId String
    joined         Boolean      @default(false)
    role           Role         @default(MEMBER)
    status         InviteStatus @default(PENDING)
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model Poll {
    id             String       @id @default(cuid())
    title          String
    pollType       PollType     @default(SINGLE)
    organizationId String
    caseStudyId    String
    options        PollOption[]
    caseStudy      CaseStudy    @relation(fields: [caseStudyId], references: [id], onDelete: Cascade)
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model PollOption {
    id              String       @id @default(cuid())
    title           String
    pollId          String
    poll            Poll         @relation(fields: [pollId], references: [id], onDelete: Cascade)
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    PollAnswers     PollAnswer[]
}

model PollAnswer {
    id           String     @id @default(cuid())
    pollId       String
    pickedOption PollOption @relation(fields: [pollOptionId], references: [id])
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    pollOptionId String
}

model SurveyFeild {
    id        String   @id @default(cuid())
    title     String
    surveyId  String
    survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Survey {
    id             String        @id @default(cuid())
    title          String
    description    String
    organizationId String
    caseStudyId    String
    SurveyField    SurveyFeild[]
    caseStudy      CaseStudy     @relation(fields: [caseStudyId], references: [id], onDelete: Cascade)
    organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
}

model CaseStudy {
    id             String       @id @default(cuid())
    title          String
    image          String
    description    String
    polls          Poll[]
    surveys        Survey[]
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

enum Role {
    ADMIN
    MEMBER
}

enum InviteStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum PollType {
    MULTIPLE
    SINGLE
}
